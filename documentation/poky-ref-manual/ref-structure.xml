<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[<!ENTITY % poky SYSTEM "../poky.ent"> %poky; ] >

<appendix id='ref-structure'>

<title>Reference: Directory Structure</title>

<para>
    The Yocto Project consists of several components.
    Understanding them and knowing where they are located is key to using the Yocto Project well.
    This appendix describes the Yocto Project file's directory structure and gives information about the various 
    files and directories.
</para>

<para>
    For information on how to establish the Yocto Project files on your local development system, see the
    "<ulink url='&YOCTO_DOCS_DEV_URL;#getting-setup'>Getting Set Up</ulink>"
    section in the Yocto Project Development Manual.
</para>

<section id='structure-core'>
    <title>Top level core components</title>

    <section id='structure-core-bitbake'>
        <title><filename>bitbake/</filename></title>

        <para>
            The Yocto Project includes a copy of BitBake for ease of use.
            The copy usually matches the current stable BitBake release from the BitBake project. 
            BitBake, a metadata interpreter, reads the Yocto Project metadata and runs the tasks 
            defined by that data. 
            Failures are usually from the metadata and not 
            from BitBake itself.
            Consequently, most users do not need to worry about BitBake.
            The <filename>bitbake/bin/</filename> directory is placed 
            into the shell's <filename>PATH</filename> environment variable by the 
            <link linkend="structure-core-script">oe-init-build-env</link> script.
        </para>

        <para>
            For more information on BitBake, see the BitBake on-line manual at 
            <ulink url="http://bitbake.berlios.de/manual/"/>.
        </para>
    </section>

    <section id='structure-core-build'>
        <title><filename>build/</filename></title>

        <para>
            This directory contains user configuration files and the output 
            generated by the Yocto Project in its standard configuration where the source tree is 
            combined with the output.
            The build directory is created initially when you <filename>source</filename>
            the Yocto Project environment setup script <filename>oe-init-build-env</filename>.
        </para>

        <para> 
            It is also possible to place output and configuration 
            files in a directory separate from the Yocto Project files
            by providing a directory name when you <filename>source</filename>
            the setup script.
            For information on separating output from the Yocto Project files, see <link 
            linkend='structure-core-script'>oe-init-build-env</link>.
        </para>
    </section>

    <section id='handbook'>
        <title><filename>documentation</filename></title>

        <para>
            This directory holds the source for the Yocto Project documentation
            as well as templates and tools that allow you to generate PDF and HTML
            versions of the manuals.  
            Each manual is contained in a sub-folder.  
            For example, the files for this manual reside in 
            <filename>poky-ref-manual</filename>.
        </para>
    </section>

    <section id='structure-core-meta'>
        <title><filename>meta/</filename></title>

        <para>
            This directory contains the Yocto Project core metadata. 
            The directory holds machine definitions, the Yocto Project distribution, 
            and the packages that make up a given system.
        </para>
    </section>

    <section id='structure-core-meta-demoapps'>
        <title><filename>meta-demoapps/</filename></title>

        <para>
            This directory contains recipes for applications and demos that are not part of the 
            Yocto Project core.
        </para>
    </section>

    <section id='structure-core-meta-rt'>
        <title><filename>meta-rt/</filename></title>

        <para>
            This directory contains recipes for real-time kernels. 
        </para>
    </section>

    <section id='structure-meta-skeleton'>
        <title><filename>meta-skeleton/</filename></title>

        <para>
            This directory contains template recipes for BSP and kernel development. 
        </para>
    </section>

    <section id='structure-core-scripts'>
        <title><filename>scripts/</filename></title>

        <para>
            This directory contains various integration scripts that implement 
            extra functionality in the Yocto Project environment (e.g. QEMU scripts).
            The <link linkend="structure-core-script">oe-init-build-env</link> script appends this
            directory to the shell's <filename>PATH</filename> environment variable.
        </para>

        <para>
            The <filename>scripts</filename> directory has useful scripts that assist contributing
            back to the Yocto Project, such as <filename>create_pull_request</filename> and 
            <filename>send_pull_request</filename>.
        </para>
    </section>

    <section id='structure-core-script'>
        <title><filename>oe-init-build-env</filename></title>

        <para>
            This script sets up the Yocto Project build environment. 
            Running this script with the <filename>source</filename> command in
            a shell makes changes to <filename>PATH</filename> and sets other core BitBake variables based on the
            current working directory. 
            You need to run this script before running BitBake commands.
            The script uses other scripts within the <filename>scripts</filename> directory to do 
            the bulk of the work.
        </para>

        <para>
            By default, running this script without a build directory argument creates the 
            <filename>build</filename> directory. 
            If you provide a build directory argument when you <filename>source</filename>
            the script, you direct the Yocto Project to create a build directory of your choice.
            For example, the following command creates a build directory named 
            <filename>mybuilds</filename> that is outside of the Yocto Project files:
            <literallayout class='monospaced'>
     $ source oe-init-build-env ~/mybuilds
            </literallayout>
        </para>
    </section>

    <section id='structure-basic-top-level'>
        <title><filename>LICENSE, README, and README.hardware</filename></title>

        <para>
            These files are standard top-level files. 
        </para>
    </section>
</section>

<section id='structure-build'>
    <title>The Build Directory - <filename>build/</filename></title>

    <section id='structure-build-pseudodone'>
        <title><filename>build/pseudodone</filename></title>

        <para>
            This tag file indicates that the initial pseudo binary was created. 
            The file is built the first time BitBake is invoked. 
        </para>
    </section>

    <section id='structure-build-conf-local.conf'>
        <title><filename>build/conf/local.conf</filename></title>

        <para>
            This file contains all the local user configuration of the Yocto Project. 
            If there is no <filename>local.conf</filename> present, it is created from 
            <filename>local.conf.sample</filename>. 
            The <filename>local.conf</filename> file contains documentation on the various configuration options.  
            Any variable set here overrides any variable set elsewhere within the Yocto Project unless 
            that variable is hard-coded within the Yocto Project (e.g. by using '=' instead of '?='). 
            Some variables are hard-coded for various reasons but these variables are 
            relatively rare.
        </para>

        <para>
            Edit this file to set the <filename><link linkend='var-MACHINE'>MACHINE</link></filename> 
            for which you want to build, which package types you
            wish to use (<filename>PACKAGE_CLASSES</filename>), or where you want to downloaded files
            (<filename><link linkend='var-DL_DIR'>DL_DIR</link></filename>).
        </para>
    </section>

    <section id='structure-build-conf-bblayers.conf'>
        <title><filename>build/conf/bblayers.conf</filename></title>

        <para>
            This file defines layers, which is a directory tree, traversed (or walked) by BitBake. 
            If <filename>bblayers.conf</filename> 
            is not present, it is created from <filename>bblayers.conf.sample</filename> when 
            you <filename>source</filename> the environment setup script.
        </para>
    </section>

    <section id='structure-build-conf-sanity_info'>
        <title><filename>build/conf/sanity_info</filename></title>

        <para>
            This file is created during the build to indicate the state of the sanity checks.
        </para>
    </section>

    <section id='structure-build-downloads'>
        <title><filename>build/downloads/</filename></title>

        <para>
            This directory is used for the upstream source tarballs.
            The directory can be reused by multiple builds or moved to another location. 
            You can control the location of this directory through the
            <filename><link linkend='var-DL_DIR'>DL_DIR</link></filename> variable.
        </para>
    </section>

    <section id='structure-build-sstate-cache'>
        <title><filename>build/sstate-cache/</filename></title>

        <para>
            This directory is used for the shared state cache.
            The directory can be reused by multiple builds or moved to another location. 
            You can control the location of this directory through the
            <filename><link linkend='var-SSTATE_DIR'>SSTATE_DIR</link></filename> variable.
        </para>
    </section>

    <section id='structure-build-tmp'>
        <title><filename>build/tmp/</filename></title>

        <para>
            This directory receives all the Yocto Project output.
            BitBake creates this directory if it does not exist. 
            As a last resort, to clean the Yocto Project and start a build from scratch (other than downloads), 
            you can remove everything in this directory or get rid of the directory completely.
            If you do, you should also completely remove the <filename>build/sstate-cache</filename>
            directory as well.
        </para>
    </section>

    <section id='structure-build-tmp-buildstats'>
        <title><filename>build/tmp/buildstats/</filename></title>

        <para>
            This directory stores the build statistics.
        </para>
    </section>

    <section id='structure-build-tmp-cache'>
        <title><filename>build/tmp/cache/</filename></title>

        <para>
            When BitBake parses the metadata, it creates a cache file of the result that can
            be used when subsequently running commands. 
            These results are stored here on a per-machine basis.
        </para>
    </section>

    <section id='structure-build-tmp-deploy'>
        <title><filename>build/tmp/deploy/</filename></title>

        <para>
            This directory contains any 'end result' output from the Yocto Project build process.
        </para>
    </section>

    <section id='structure-build-tmp-deploy-deb'>
        <title><filename>build/tmp/deploy/deb/</filename></title>

        <para>
            This directory receives any <filename>.deb</filename> packages produced by the Yocto Project.
            The packages are sorted into feeds for different architecture types.
        </para>
    </section>

    <section id='structure-build-tmp-deploy-rpm'>
        <title><filename>build/tmp/deploy/rpm/</filename></title>

        <para>
            This directory receives any <filename>.rpm</filename> packages produced by the Yocto Project.  
            The packages are sorted into feeds for different architecture types.
        </para>
    </section>

    <section id='structure-build-tmp-deploy-images'>
        <title><filename>build/tmp/deploy/images/</filename></title>

        <para>
            This directory receives complete filesystem images. 
            If you want to flash the resulting image from a build onto a device, look here for the image.
        </para>
 
        <para>
            Note, you should not remove any files from this directory by hand in an attempt
            to rebuild an image. 
            If you want to clean out the cache, re-run the build using the following 
            BitBake command:
            <literallayout class='monospaced'>
     $ bitbake -c cleanall &lt;target&gt;
            </literallayout>
        </para>
    </section>

    <section id='structure-build-tmp-deploy-ipk'>
        <title><filename>build/tmp/deploy/ipk/</filename></title>

        <para>This directory receives <filename>.ipk</filename> packages produced by the Yocto Project.</para>
    </section>

    <section id='structure-build-tmp-sysroots'>
        <title><filename>build/tmp/sysroots/</filename></title>

        <para>
            This directory contains shared header files and libraries as well as other shared 
            data.  
            Packages that need to share output with other packages do so within this directory. 
            The directory is subdivided by architecture so multiple builds can run within
            the one build directory.
        </para>
    </section>

    <section id='structure-build-tmp-stamps'>
        <title><filename>build/tmp/stamps/</filename></title>

        <para>
            This directory holds information that that BitBake uses for accounting purposes 
            to track what tasks have run and when they have run.
            The directory is sub-divided by architecture. 
            The files in the directory are empty of data.
            However, BitBake uses the filenames and timestamps for tracking purposes.
        </para>
    </section>

    <section id='structure-build-tmp-log'>
        <title><filename>build/tmp/log/</filename></title>

        <para>
            This directory contains general logs that are not otherwise placed using the 
            package's <filename><link linkend='var-WORKDIR'>WORKDIR</link></filename>.
            Examples of logs are the output from the <filename>check_pkg</filename> or 
            <filename>distro_check</filename> tasks.
        </para>
    </section>

    <section id='structure-build-tmp-pkgdata'>
        <title><filename>build/tmp/pkgdata/</filename></title>

        <para>
            This directory contains intermediate packaging data that is used later in the packaging process. 
            For more information, see the "<link linkend='ref-classes-package'>Packaging - package*.bbclass</link>" section.
        </para>
    </section>

    <section id='structure-build-tmp-work'>
        <title><filename>build/tmp/work/</filename></title>

        <para>
            This directory contains architecture-specific work sub-directories for packages built by BitBake. 
            All tasks execute from a work directory.
            For example, the source for a particular package is unpacked, patched, configured and compiled all
            within its own work directory.
            Within the work directory, organization is based on the package group for which the source
            is being compiled.
        </para>

        <para>
            It is worth considering the structure of a typical work directory. 
            As an example, consider the linux-yocto kernel 3.0 on the machine <filename>qemux86</filename> 
            built within the Yocto Project.  
            For this package, a work directory of 
            <filename>tmp/work/qemux86-poky-linux/linux-yocto-3.0+git1+&lt;.....&gt;</filename>, 
            referred to as <filename><link linkend='var-WORKDIR'>WORKDIR</link></filename>, is created.  
            Within this directory, the source is unpacked to 
            <filename>linux-qemux86-standard-build</filename> and then patched by Quilt 
            (see the 
            "<ulink url='&YOCTO_DOCS_DEV_URL;#using-a-quilt-workflow'>Modifying Package 
            Source Code with Quilt</ulink>" section in the Yocto Project Development Manual.   
            Within the <filename>linux-qemux86-standard-build</filename> directory, 
            standard Quilt directories <filename>linux-3.0/patches</filename>
            and <filename>linux-3.0/.pc</filename> are created,
            and standard Quilt commands can be used.
        </para>

        <para>
            There are other directories generated within WORKDIR. 
            The most important directory is WORKDIR<filename>/temp/</filename>, which has log files for each 
            task (<filename>log.do_*.pid</filename>) and contains the scripts BitBake runs for 
            each task (<filename>run.do_*.pid</filename>). 
            The WORKDIR<filename>/image/</filename> directory is where "make 
            install" places its output that is then split into sub-packages 
            within WORKDIR<filename>/packages-split/</filename>.
        </para>
    </section>
</section>

<section id='structure-meta'>
    <title>The Metadata - <filename>meta/</filename></title>

    <para>
        As mentioned previously, metadata is the core of the Yocto Project. 
        Metadata has several important subdivisions:
    </para>

    <section id='structure-meta-classes'>
        <title><filename>meta/classes/</filename></title>

        <para>
            This directory contains the <filename>*.bbclass</filename> files. 
            Class files are used to abstract common code so it can be reused by multiple 
            packages. 
            Every package inherits the <filename>base.bbclass</filename> file.
            Examples of other important classes are <filename>autotools.bbclass</filename>, which 
            in theory allows any Autotool-enabled package to work with the Yocto Project with minimal effort.
            Another example is <filename>kernel.bbclass</filename> that contains common code and functions 
            for working with the Linux kernel. 
            Functions like image generation or packaging also have their specific class files 
            such as <filename>image.bbclass</filename>, <filename>rootfs_*.bbclass</filename> and 
            <filename>package*.bbclass</filename>.
        </para>
    </section>

    <section id='structure-meta-conf'>
        <title><filename>meta/conf/</filename></title>

        <para>
            This directory contains the core set of configuration files that start from 
            <filename>bitbake.conf</filename> and from which all other configuration 
            files are included.
            See the include statements at the end of the file and you will note that even 
            <filename>local.conf</filename> is loaded from there. 
            While <filename>bitbake.conf</filename> sets up the defaults, you can often override 
            these by using the (<filename>local.conf</filename>) file, machine file or 
            the distribution configuration file.
        </para>
    </section>

    <section id='structure-meta-conf-machine'>
        <title><filename>meta/conf/machine/</filename></title>

        <para>
            This directory contains all the machine configuration files. 
            If you set <filename>MACHINE="qemux86"</filename>, 
            Yocto Project looks for a <filename>qemux86.conf</filename> file in this 
            directory. 
            The <filename>include</filename> directory contains various data common to multiple machines. 
            If you want to add support for a new machine to the Yocto Project, look in this directory.
        </para>
    </section>

    <section id='structure-meta-conf-distro'>
        <title><filename>meta/conf/distro/</filename></title>

        <para>
            Any distribution-specific configuration is controlled from this directory. 
            The Yocto Project only contains the Yocto Project distribution so 
            <filename>defaultsetup.conf</filename> is the main file here.  
            This directory includes the versions and the 
            <filename>SRCDATE</filename> definitions for applications that are configured here. 
            An example of an alternative configuration is <filename>poky-bleeding.conf</filename>
            although this file mainly inherits its configuration from the Yocto Project itself.
        </para>
    </section>

    <section id='structure-meta-recipes-bsp'>
        <title><filename>meta/recipes-bsp/</filename></title>

        <para>
            This directory contains anything linking to specific hardware or hardware 
            configuration information such as "u-boot" and "grub".
        </para>
    </section>

    <section id='structure-meta-recipes-connectivity'>
        <title><filename>meta/recipes-connectivity/</filename></title>

        <para>
            This directory contains libraries and applications related to communication with other devices.
        </para>
    </section>

    <section id='structure-meta-recipes-core'>
        <title><filename>meta/recipes-core/</filename></title>

        <para>
            This directory contains what is needed to build a basic working Linux image 
            including commonly used dependencies.
        </para>
    </section>

    <section id='structure-meta-recipes-devtools'>
        <title><filename>meta/recipes-devtools/</filename></title>

        <para>
            This directory contains tools that are primarily used by the build system.
            The tools, however, can also be used on targets.
        </para>
    </section>

    <section id='structure-meta-recipes-extended'>
        <title><filename>meta/recipes-extended/</filename></title>

        <para>
            This directory contains non-essential applications that add features compared to the 
            alternatives in core. 
            You might need this directory for full tool functionality or for Linux Standard Base (LSB)
            compliance.
        </para>
    </section>

    <section id='structure-meta-recipes-gnome'>
        <title><filename>meta/recipes-gnome/</filename></title>

        <para>
            This directory contains all things related to the GTK+ application framework.
        </para>
    </section>

    <section id='structure-meta-recipes-graphics'>
        <title><filename>meta/recipes-graphics/</filename></title>

        <para>
            This directory contains X and other graphically related system libraries
        </para>
    </section>

    <section id='structure-meta-recipes-kernel'>
        <title><filename>meta/recipes-kernel/</filename></title>

        <para>
            This directory contains the kernel and generic applications and libraries that 
            have strong kernel dependencies.
        </para>
    </section>

    <section id='structure-meta-recipes-multimedia'>
        <title><filename>meta/recipes-multimedia/</filename></title>

        <para>
            This directory contains codecs and support utilities for audio, images and video.
        </para>
    </section>

    <section id='structure-meta-recipes-qt'>
        <title><filename>meta/recipes-qt/</filename></title>

        <para>
            This directory contains all things related to the Qt application framework.
        </para>
    </section>

    <section id='structure-meta-recipes-sato'>
        <title><filename>meta/recipes-sato/</filename></title>

        <para>
            This directory contains the Sato demo/reference UI/UX and its associated applications
            and configuration data.
        </para>
    </section>

    <section id='structure-meta-recipes-support'>
        <title><filename>meta/recipes-support/</filename></title>

        <para>
            This directory contains recipes that used by other recipes, but that are not directly 
            included in images (i.e. dependencies of other recipes).
        </para>
    </section>

    <section id='structure-meta-site'>
        <title><filename>meta/site/</filename></title>

        <para>
            This directory contains a list of cached results for various architectures.
            Because certain "autoconf" test results cannot be determined when cross-compiling due to 
            the tests not able to run on a live system, the information in this directory is 
            passed to "autoconf" for the various architectures. 
        </para>
    </section>

    <section id='structure-meta-recipes-txt'>
        <title><filename>meta/recipes.txt/</filename></title>

        <para>
            This file is a description of the contents of <filename>recipes-*</filename>.
        </para>
    </section>
</section>

</appendix>
<!-- 
vim: expandtab tw=80 ts=4 
-->
